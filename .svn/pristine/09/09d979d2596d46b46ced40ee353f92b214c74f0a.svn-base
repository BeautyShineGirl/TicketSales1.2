package cn.nvinfo.wxpay.servlet;


import java.io.IOException;
import java.util.Date;
import java.util.Map;
import java.util.SortedMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.entity.StringEntity;

import cn.nvinfo.utils.MD5;
import cn.nvinfo.utils.SignUtils;
import cn.nvinfo.utils.SwiftpassConfig;
import cn.nvinfo.utils.XmlUtils;
import cn.nvinfo.utils.SendPost;


/**
 * <一句话功能简述>
 * <功能详细描述>退款
 * 
 * @author  Administrator
 * @version  [版本号, 2014-8-29]
 * @see  [相关类/方法]
 * @since  [产品/模块版本]
 */
public class RefundServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doPost(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.setCharacterEncoding("utf-8");
        resp.setCharacterEncoding("utf-8");
        
        String out_trade_no=req.getParameter("out_trade_no");//订单表中的orderId
        String out_refund_no=req.getParameter("id");//订单表中的id
        String total_fee=req.getParameter("total_fee");//标价金额
        String refund_fee=req.getParameter("refund_fee");//退款金额
        
        SortedMap<String,String> map = XmlUtils.getParameterMap(req);
        
        String key = SwiftpassConfig.key;
        
        String res = null;
        
        String reqUrl = "https://api.mch.weixin.qq.com/secapi/pay/refund";
        
        map.put("appid", "wxaea446e27328b87a");//公众账号id
        
		map.put("mch_id", SwiftpassConfig.mch_id);//商户号
		
		map.put("out_trade_no", out_trade_no);//商户订单号
		
        map.put("out_refund_no", out_refund_no);//商户退款单号   商户系统内部唯一
        
        map.put("total_fee", total_fee);//标价金额    微信的单位是分
        
        map.put("refund_fee", refund_fee);//退款金额   微信的单位是分
        
        map.put("nonce_str", String.valueOf(new Date().getTime()));//随即字符串
        
        Map<String,String> params = SignUtils.paraFilter(map);
        
        StringBuilder buf = new StringBuilder((params.size() +1) * 10);
		SignUtils.buildPayParams(buf,params,false);
		String preStr = buf.toString();
		String sign = MD5.sign(preStr, "&key=" + SwiftpassConfig.key, "utf-8");
		map.put("sign", sign);//签名
        
        
        try {
        	//调证书向微信发起退款
            StringEntity entityParams = new StringEntity(XmlUtils.parseXML(map),"utf-8");
            String sendPost = SendPost.sendPost(reqUrl, entityParams.toString());
            if(sendPost != null){
            	byte[] bytes = sendPost.getBytes();
                Map<String,String> resultMap = XmlUtils.toMap(bytes, "utf-8");
                //res = XmlUtils.toXml(resultMap);
                if("FALL".equals(resultMap.get("return_code"))){
                	//退款业务流程错误，需要商户触发重试来解决 
                	if("BIZERR_NEED_RETRY ".equals(resultMap.get("err_code"))){
                		for (int i = 0; i < 1; i++) {
							doPost(req,resp);
							resp.getWriter().write("{\"msg\":\"退款业务流程错误，需要商户触发重试来解决\",\"result\":[{}],\"code\":\"\"}");
						}
					}
                	//订单已经超过退款期限
					if("TRADE_OVERDUE".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"订单已经超过退款期限\",\"result\":[{}],\"code\":\"\"}");
					}
					//业务错误
					if("ERROR".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"业务错误\",\"result\":[{}],\"code\":\"\"}");
					}
					//退款请求失败
					if("USER_ACCOUNT_ABNORMAL".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"退款请求失败\",\"result\":[{}],\"code\":\"\"}");
					}
					//系统错误
					if("SYSTEMERROR".equals(resultMap.get("err_code"))){
						for (int i = 0; i < 1; i++) {
							doPost(req,resp);
							resp.getWriter().write("{\"msg\":\"系统错误\",\"result\":[{}],\"code\":\"\"}");
						}
					}
					//无效请求过多
					if("INVALID_REQ_TOO_MUCH".equals(resultMap.get("err_code"))||"MCHID_NOT_EXIST".equals(resultMap.get("err_code"))
							||"LACK_PARAMS".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"请检查业务是否正常，确认业务正常后请在1分钟后再来重试\",\"result\":[{}],\"code\":\"\"}");
					}
					//余额不足	 	此状态代表退款申请失败，商户可根据具体的错误提示做相应的处理。
					if("NOTENOUGH".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"余额不足\",\"result\":[{}],\"code\":\"\"}");
					}
					//无效transaction_id	请求参数错误，检查原交易号是否存在或发起支付交易接口返回失败
					if("INVALID_TRANSACTIONID".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"无效transaction_id\",\"result\":[{}],\"code\":\"\"}");
					}
					//参数错误
					if("PARAM_ERROR".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"请求参数错误，请重新检查再调用退款申请\",\"result\":[{}],\"code\":\"\"}");
					}
					
					//APPID不存在
					if("APPID_NOT_EXIST".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"请检查APPID是否正确\",\"result\":[{}],\"code\":\"\"}");
					}
					// 	MCHID不存在
					if("MCHID_NOT_EXIST".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"请检查MCHID是否正确\",\"result\":[{}],\"code\":\"\"}");
					}
					//请使用post方法
					if("REQUIRE_POST_METHOD".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\" 请使用post方法\",\"result\":[{}],\"code\":\"\"}");
					}
					//XML格式错误
					if("XML_FORMAT_ERROR".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"XML格式错误\",\"result\":[{}],\"code\":\"\"}");
					}
					//频率限制	2个月之前的订单申请退款有频率限制 
					if("FREQUENCY_LIMITED ".equals(resultMap.get("err_code"))){
						resp.getWriter().write("{\"msg\":\"该笔退款未受理，请降低频率后重试\",\"result\":[{}],\"code\":\"\"}");
					}
					//签名错误
					if("SIGNERROR".equals(resultMap.get("err_code"))){
						req.setAttribute("out_trade_no", out_trade_no);
						req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						resp.getWriter().write("{\"msg\":\"支付失败，订单已关闭\",\"result\":[{}],\"code\":\"\"}");
					}
                }else{
                	resp.getWriter().write("{\"msg\":\"提交退款成功\",\"result\":[{}],\"code\":\"\"}");
                }
                
               
            }else{
                res = "操作失败!";
            }
        } catch (Exception e) {
            e.printStackTrace();
            res = "操作失败";
        } 
        if(res.startsWith("<")){
            resp.setHeader("Content-type", "text/xml;charset=UTF-8");
        }else{
            resp.setHeader("Content-type", "text/html;charset=UTF-8");
        }
       // resp.getWriter().write(res);
    }

}
