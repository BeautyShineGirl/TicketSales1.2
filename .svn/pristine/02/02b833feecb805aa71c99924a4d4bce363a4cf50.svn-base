package cn.nvinfo.controller;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.swing.JOptionPane;


import org.apache.log4j.Logger;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;



import cn.nvinfo.domain.Priority;
import cn.nvinfo.domain.Product;
import cn.nvinfo.service.ProductService;
import cn.nvinfo.tools.ProductDictionary;
import cn.nvinfo.tools.INList;
import cn.nvinfo.tools.ProductList;
import cn.nvinfo.utils.CheckUtil;
import cn.nvinfo.utils.ExportExcel;
import cn.nvinfo.utils.Pager;
import cn.nvinfo.utils.Result;

/**
 * 产品信息管理
 * @author 杨立   2017-09-25
 *
 */

@Controller
@Scope("prototype")
@RequestMapping("product")
public class ProductAction {
	private static Logger log=Logger.getLogger(ProductAction.class);
	@Resource
	private ProductService productService;
	private Integer pageSize=10;	
    

	/**
	 *  分页查询	杨立  2017-09-26
	 * @param pageIndex
	 * @param name
	 * @param viewName
	 * @param viewType
	 * @param ticketType
	 * @param endPrice
	 * @return
	 */
	@RequestMapping("/findPageData.action")
	public @ResponseBody Object findPageData(Integer pageIndex,Integer id,Integer logic,String name,String viewName,String viewType,
			String ticketType,Double endPrice,Integer power_id,Integer staff_id){
		//验证参数
		if(!"".equals(CheckUtil.checkArgsNotNull(pageIndex,power_id,staff_id))){
			log.info(new Result(0,"参数错误"));
			return new Result(0,"参数错误");
		}
		Pager<ProductList> pager=null;
		if(power_id==0){
			log.info("系统管理员");
			//系统管理员	yangli	2017-10-19	
			pager=productService.getPager(pageIndex,pageSize,id,logic,name,viewName,viewType,ticketType,endPrice);
		}else{
			log.info("普通管理员");
			//普通管理员	yangli	2017-10-19
			pager=productService.getPager(pageIndex,pageSize,id,logic,name,viewName,viewType,ticketType,endPrice,staff_id);
		}
		log.info("分页查询提交条件："+","+pageIndex+","+id+","+logic+","+name+","+viewName+","+viewType+","+ticketType+","+endPrice);
		if(pager.getDatas().size()!=0){
			log.info(new Result(1,"查询成功",pager));
			return new Result(1,"查询成功",pager);
		}else{
			log.info(new Result(0,"暂无数据",pager));
			return new Result(0,"暂无数据",pager);
		}
	}
	
	
	/**
	 * 添加请求，返回字典数据	杨立   2017-09-25 
	 * @return
	 */
	@RequestMapping("/addUI.action")
	public @ResponseBody Object addUI(){
		//从字典中获得门票类型
		List<String> typeList=productService.getType();
		//获得票型
		List<String> ticketType=productService.ticketType();
		//从字典中是否可退
		List<String> isCancel=productService.getIsCancel();
		//获得优先级类别和优先级
		List<Priority> priority=productService.getPriority();
		//获得分销商列表
		List<INList> custom=productService.getCustom();
		//所属景区
		List<INList> view = productService.getView();
		//返回景区类别
		List<INList> viewType = productService.getViewType();
		//供应商
		List<INList> supplier = productService.getSupplier();
		ProductDictionary pd=new ProductDictionary();
		pd.setTypeList(typeList);
		pd.setTicketType(ticketType);
		pd.setPriority(priority);
		pd.setIsCancel(isCancel);
		pd.setCustom(custom);
		pd.setView(view);
		pd.setSupplier(supplier);
		pd.setViewType(viewType);
		log.info(new Result(1,"查询成功",pd));
		return new Result(1,"查询成功",pd);
	}
	/**
	 * 添加  杨立   2017-09-25 
	 * @param view
	 * @param request
	 * @param file
	 * @return
	 */
	@RequestMapping(value="/add.action")
	public @ResponseBody Object add(Product product){	
		String name=product.getName();
		Integer view=product.getViewId();
		Integer supplier=product.getSupplierId();
		Double endPrice=product.getEndPrice();
		Double marketPric=product.getMarketPrice();
		String isSale=product.getIsSale();
		String type=product.getType();
		String ticketType=product.getTicketType();
		String startTime=product.getStartTime();
		String endTime=product.getEndTime();
		Integer dailySale=product.getDailySale();
		Integer num=product.getNum();
		String orderTime=product.getOrderTime();
		String isCancel=product.getIsCancel();
		String notice=product.getNotice();
		String costInside=product.getCostInside();
		String costOutside=product.getCostOutside();
		String userType=product.getUserType();
		Integer priorityId=product.getPriorityId();
		//根据priorityId获得优先级类别的名字	yangli	2017-10-19
		List<String> priorityType=productService.getByProId(priorityId);
		product.setPriorityType(priorityType.get(0));
		String method=product.getMethod();
		Integer customId=product.getCustomId();
		String customName=product.getCustomName();
		 
		
		//验证参数
		if(!"".equals(CheckUtil.checkArgsNotNull(name,view,supplier,endPrice,marketPric,isSale,type,
				ticketType,startTime,endTime,dailySale,num,orderTime,isCancel,notice,costInside,costOutside,
				userType,priorityId,method,customId,customName))){
			log.info(new Result(0,"参数错误"));
			return new Result(0,"参数错误");
		}
		
		log.info("添加提交条件："+","+name+","+view+","+supplier+","+endPrice+","+marketPric+","+isSale+","+type+","+
				ticketType+","+startTime+","+endTime+","+dailySale+","+num+","+orderTime+","+isCancel+","+notice+","+costInside+","+costOutside+","+
				userType+","+priorityId+","+customName+","+method+","+customId);
		//添加操作
		int rows= productService.add(product);
		Integer pageIndex=1;
		Pager<ProductList> pager1=productService.getPager(pageIndex,pageSize,null,null,null,null,null,null,null);
		Integer pageCount =pager1.getPageCount();
		Pager<ProductList> pager=productService.getPager(pageCount,pageSize,null,null,null,null,null,null,null);
		//List<ProductList> datas = pager.getDatas();
		if(rows>0){
			log.info(new Result(1,"添加成功",pager));
			return new Result(1,"添加成功",pager);
		} else {
			log.info(new Result(0,"添加失败"));
			return new Result(0,"添加失败");
		}
	}
	/**
	 * 修改数据回显  杨立  2017-09-25
	 * @param id
	 * @return
	 */
	@RequestMapping("/editUI.action")
	public @ResponseBody Object editUI(Integer id){
		//验证参数
		if(!"".equals(CheckUtil.checkArgsNotNull(id))){
			log.info(new Result(0,"参数错误"));
			return new Result(0,"参数错误");
		}
		//查询
		Product product = productService.getById(id);
		Integer viewId = product.getViewId();
		Integer supplierId = product.getSupplierId();
		//根据id获得景区名字
		String viewName=productService.getViewName(viewId);
		String supplierName=productService.getSupplierName(supplierId);
		product.setViewName(viewName);
		product.setSupplierName(supplierName);
		log.info(new Result(1,"查询成功",product));
		return new Result(1,"查询成功",product);
	}
	/**
	 * 修改	杨立	2017-09-25
	 * 
	 */
	@RequestMapping("/edit.action")
	public @ResponseBody Object edit(Product product){
		Integer id=product.getId();
		String name=product.getName();
		Integer view=product.getViewId();
		Integer supplier=product.getSupplierId();
		Double endPrice=product.getEndPrice();
		Double marketPric=product.getMarketPrice();
		String isSale=product.getIsSale();
		String type=product.getType();
		String ticketType=product.getTicketType();
		String startTime=product.getStartTime();
		String endTime=product.getEndTime();
		Integer dailySale=product.getDailySale();
		Integer num=product.getNum();
		String orderTime=product.getOrderTime();
		String isCancel=product.getIsCancel();
		String notice=product.getNotice();
		String costInside=product.getCostInside();
		String costOutside=product.getCostOutside();
		String userType=product.getUserType();
		//	String priorityType=product.getPriorityType();
		Integer priorityId=product.getPriorityId();
		//根据priorityId获得优先级类别的名字	yangli	2017-10-19
		List<String> priorityType=productService.getByProId(priorityId);
		product.setPriorityType(priorityType.get(0));
		String method=product.getMethod();
		Integer customId=product.getCustomId();
		String customName=product.getCustomName();
		//验证参数
		if(!"".equals(CheckUtil.checkArgsNotNull(id,name,view,supplier,endPrice,marketPric,isSale,type,
				ticketType,startTime,endTime,dailySale,num,orderTime,isCancel,notice,costInside,costOutside,
				userType,priorityType,priorityId,customName,method,customId))){
			log.info(new Result(0,"参数错误"));
			return new Result(0,"参数错误");
		}
		log.info("修改提交条件："+","+id+","+name+","+view+","+supplier+","+endPrice+","+marketPric+","+isSale+","+type+","+
				ticketType+","+startTime+","+endTime+","+dailySale+","+num+","+orderTime+","+isCancel+","+notice+","+costInside+","+costOutside+","+
				userType+","+priorityType+","+priorityId+","+customName+","+method+","+customId);
		
		//修改操作
		int rows= productService.edit(product);
		if(rows>0){
			log.info(new Result(1,"修改成功"));
			return new Result(1,"修改成功");
		} else {
			log.info(new Result(0,"修改失败"));
			return new Result(0,"修改失败");
		}		
	}
	/**
	 * 删除  	杨立   2017-09-25
	 * @param id
	 * @return
	 */
	@RequestMapping("/delete.action")
	public @ResponseBody Object delete(Integer id){
		//验证参数
		if(!"".equals(CheckUtil.checkArgsNotNull(id))){
			log.info(new Result(0,"参数错误"));
			return new Result(0,"参数错误");
		}
		log.info("删除提交的信息："+","+id);
		//再删除产品之前，先查询该产品是否有订单，若有，则返回删除失败	yangli	2017-10-19
		int viewCount=productService.getOrder(id);
		if(viewCount!=0){
			log.info(new Result(0,"删除失败，该产品存在订单"));
			return new Result(0,"删除失败，该产品存在订单");
		}

		//修改操作
		int rows= productService.delete(id);
		if(rows>0){
			log.info(new Result(1,"删除成功"));
			return new Result(1,"删除成功");
		} else {
			log.info(new Result(0,"删除失败"));
			return new Result(0,"删除失败");
		}		
	}

	/**
	 * 导出产品管理信息表格	杨立	2017-09-26   未放到项目中测    文件导出会覆盖之前的文件，并且不能自主选则盘符和改名
	 * @param pageIndex
	 * @return
	 */
	@RequestMapping("/outExcel.action")
	public @ResponseBody Object outExcel(Integer pageIndex,Integer id, Integer logic,String name,String viewName,String viewType,String ticketType,Double endPrice)  
	{  
		if(!"".equals(CheckUtil.checkArgsNotNull(pageIndex))){
			log.info(new Result(0,"参数错误"));
			return new Result(0,"参数错误");
		}
		log.info("导出提交信息："+","+pageIndex+","+id+","+logic+","+name+","+viewName+","+viewType+","+ticketType+","+endPrice);
		Pager<ProductList> pager=productService.getPager(pageIndex,pageSize,id,logic,name,viewName,viewType,ticketType,endPrice);
		ExportExcel<ProductList> ex = new ExportExcel<ProductList>();  
		String[] headers =  
			{ "产品编号", "产品名称", "所属地区", "供应商" ,"结算价", "景门市价", "优先级","是否销售"};  
		
		List<ProductList> dataset = new ArrayList<ProductList>();  
		for (ProductList p : pager.getDatas()) {
			ProductList pl =new ProductList();
			pl.setId(p.getId());
			pl.setName(p.getName());
			pl.setViewName(pl.getViewName());
			pl.setSupplierName(pl.getSupplierName());
			pl.setEndPrice(pl.getEndPrice());
			pl.setPriorityType(pl.getPriorityType());
			pl.setIsSale(pl.getIsSale());
			dataset.add(pl);
		}
		
		try{
			OutputStream out = new FileOutputStream("E://产品信息管理表.xls");  
			ex.exportExcel(headers, dataset, out);  
			out.close();  			
			JOptionPane.showMessageDialog(null, "导出成功!");  
		} catch (FileNotFoundException e) {  
			e.printStackTrace();  
		} catch (IOException e) {  
			e.printStackTrace();  
		} 
		 return new Result(1,"导出成功");
	}  	
}
