package cn.nvinfo.wxpay.servlet;


import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import cn.nvinfo.utils.HttpUtil;
import cn.nvinfo.utils.MD5;
import cn.nvinfo.utils.QRCodeUtil;
import cn.nvinfo.utils.SignUtils;
import cn.nvinfo.utils.StringUtil;
import cn.nvinfo.utils.SwiftpassConfig;
import cn.nvinfo.utils.XmlUtils;


/**
 * 测试支付
 * @author admin
 *
 */
public class PayServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doPost(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		resp.setCharacterEncoding("utf-8");
		String body = (String) req.getAttribute("body");//冰雪大世界成人票
		String total_fee=(String) req.getAttribute("total_fee");//标价金额
		String out_trade_no=(String) req.getAttribute("out_trade_no");//商户订单号
		String product_id= req.getParameter("product_id");
		
		/*Integer id=Integer.parseInt(req.getParameter("id"));//order的id
		//查询提交的订单 是否已支付，如未支付orderState=1，则向微信发出支付请求	杨立	2017-10-26
		int state=userService.selectOrderState(id);*/
		//if(state==1){
			/*SortedMap<String,String> map = XmlUtils.getParameterMap(req);
			map.clear();*/
			Map<String,String> map=new HashMap<String, String>();
			map.put("appid", "wxaea446e27328b87a");//公众账号id
			map.put("mch_id", SwiftpassConfig.mch_id);//商户号
			map.put("notify_url", SwiftpassConfig.notify_url);//通知地址
			map.put("nonce_str", String.valueOf(new Date().getTime()));//随即字符串
			map.put("body", body);//商品描述
			map.put("total_fee", total_fee);//标价金额    微信的单位是分
			map.put("spbill_create_ip", "192.168.1.109");//终端号
			map.put("trade_type", "NATIVE");//交易类型
			map.put("product_id", product_id);//产品id
			map.put("out_trade_no",out_trade_no);//商户订单号
			//Map<String,String> params = SignUtils.paraFilter(map);
			StringBuilder buf = new StringBuilder((map.size() +1) * 10);
			SignUtils.buildPayParams(buf,map,false);
			String preStr = buf.toString();
			String sign = MD5.sign(preStr, "&key=" + SwiftpassConfig.key, "utf-8");
			map.put("sign", sign);//签名
			String reqUrl = SwiftpassConfig.req_url;
			String res = null;
			
			try {
				String resultPost = HttpUtil.post(reqUrl, XmlUtils.toXml(map));
				if(resultPost != null){
					Map<String,String> resultMap = XmlUtils.toMap(resultPost.getBytes(), "GB2312");
					//res = XmlUtils.toXml(resultMap);
					//处理返回的各种状态
					//return_code和result_code都为success的时候
					if("SUCCESS".equals(resultMap.get("return_code"))&&"SUCCESS".equals(resultMap.get("result_code"))){
						String picPath = StringUtil.getRandomString(4);
						String str = String.valueOf(new Date().getTime());
						String path=req.getSession().getServletContext().getRealPath("upload/erWeiMa_wx")+File.separator;
						String file=path+str+picPath+".png";
						//生成二维码
						QRCodeUtil.QRCode(resultMap.get("code_url"), 300, 300, "png",file );
						resp.getOutputStream().print("http://192.168.1.109:8080"+req.getContextPath()+"/upload/erWeiMa_wx/"+str+picPath+".png");
							
					}else{
						if("NOAUTH".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						if("NOTENOUGH".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						if("ORDERPAID".equals(resultMap.get("err_code"))){
							resp.getOutputStream().print("{\"msg\":\"订单已支付\",\"result\":[{}],\"code\":\"\"}");
						}
						if("ORDERCLOSED".equals(resultMap.get("err_code"))){
							resp.getOutputStream().print("{\"msg\":\"订单已关闭\",\"result\":[{}],\"code\":\"\"}");
						}
						if("SYSTEMERROR".equals(resultMap.get("err_code"))){
							for (int i = 0; i < 1; i++) {
								doPost(req,resp);
							}
						}
						if("APPID_NOT_EXIST".equals(resultMap.get("err_code"))||"MCHID_NOT_EXIST".equals(resultMap.get("err_code"))
								||"LACK_PARAMS".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						if("OUT_TRADE_NO_USED".equals(resultMap.get("err_code"))){
							resp.getOutputStream().print("{\"msg\":\"商户订单号重复\",\"result\":[{}],\"code\":\"\"}");
						}
						if("XML_FORMAT_ERROR".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						if("REQUIRE_POST_METHOD".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						if("POST_DATA_EMPTY".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						if("NOT_UTF8".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
						//签名错误
						if("SIGNERROR".equals(resultMap.get("err_code"))){
							req.setAttribute("out_trade_no", out_trade_no);
							req.getRequestDispatcher("/closeOrderServlet").forward(req, resp);
						}
					}
				}else{
					res = "操作失败";
					resp.getOutputStream().print("{\"msg\":\"操作失败\",\"result\":[{}],\"code\":\"\"}");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} 
	}
}
