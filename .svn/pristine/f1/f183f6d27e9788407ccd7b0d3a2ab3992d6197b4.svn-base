package cn.nvinfo.wxpay.servlet;

import java.io.IOException;
import java.util.Date;
import java.util.Map;
import java.util.SortedMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import cn.nvinfo.domain.Order;
import cn.nvinfo.service.UserService;
import cn.nvinfo.utils.CheckUtil;
import cn.nvinfo.utils.MD5;
import cn.nvinfo.utils.SMS;
import cn.nvinfo.utils.SignUtils;
import cn.nvinfo.utils.SwiftpassConfig;
import cn.nvinfo.utils.XmlUtils;
/**
 * 查询订单
 * @author admin
 *
 */
public class QueryServlet extends HttpServlet {
	private static Logger log=Logger.getLogger(QueryServlet.class);
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doPost(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		resp.setCharacterEncoding("utf-8");
		
		log.info("=====================================QueryServlet=====================================");
		log.info("=====================================支付查询开始=====================================");
		
		String out_trade_no=req.getParameter("out_trade_no");
		String id=out_trade_no;//获得订单的id 用于在本地数据库查询定的的状态
		log.info("前端传过来的参数： 商户订单号out_trade_no(orderId)："+out_trade_no+",  订单在数据库中的id:"+id);
		//验证参数
		if(!"".equals(CheckUtil.checkArgsNotNull(id,out_trade_no))){
			JSONObject obj=new JSONObject();
			obj.put("result", false);
			obj.put("code", "0");
			obj.put("message", "参数错误");
			log.info("返回前端的参数："+obj.toString());
			resp.getOutputStream().print(obj.toString());
			//log.info("返回前端的参数： "+"{\"msg\":\"参数错误\",\"result\":[{}],\"code\":\"\"}");
		}
		//获取spring容器中的service
		WebApplicationContext  ctx= WebApplicationContextUtils.getWebApplicationContext(this.getServletContext());
		UserService userService = (UserService) ctx.getBean("userService");
		int state=userService.selectOrderState(id);
		if(state!=0){
			SortedMap<String,String> map = XmlUtils.getParameterMap(req);
			map.put("appid", "wxaea446e27328b87a");//公众账号id
			map.put("mch_id", SwiftpassConfig.mch_id);//商户号
			map.put("out_trade_no", out_trade_no);//商户订单号
			map.put("nonce_str", String.valueOf(new Date().getTime()));//随即字符串
			Map<String,String> params = SignUtils.paraFilter(map);
			StringBuilder buf = new StringBuilder((params.size() +1) * 10);
			SignUtils.buildPayParams(buf,params,false);
			String preStr = buf.toString();
			String sign = MD5.sign(preStr, "&key=" + SwiftpassConfig.key, "utf-8");
			map.put("sign", sign);//签名
			String reqUrl = "https://api.mch.weixin.qq.com/pay/orderquery";
			CloseableHttpResponse response = null;
			CloseableHttpClient client = null;
			String res=null;
			log.info("请求支付查询提交的签名："+sign);
			try {
				HttpPost httpPost = new HttpPost(reqUrl);
				StringEntity entityParams = new StringEntity(XmlUtils.parseXML(map),"utf-8");
				log.info("请求支付查询发送给微信服务器的xml数据："+System.getProperty("line.separator")+"\t\t\t\t"+XmlUtils.toXml(map));
				httpPost.setEntity(entityParams);
				//httpPost.setHeader("Content-Type", "text/xml;charset=ISO-8859-1");
				client = HttpClients.createDefault();
				response = client.execute(httpPost);
				if(response != null && response.getEntity() != null){
					Map<String,String> resultMap = XmlUtils.toMap(EntityUtils.toByteArray(response.getEntity()), "utf-8");
					log.info("请求支付查询微信服务器返回的数据:"+System.getProperty("line.separator")+"\t\t\t\t"+XmlUtils.toXml(resultMap));
					//res = XmlUtils.toXml(resultMap);
					if("FAIL".equals(resultMap.get("return_code"))){
						if("ORDERPAID".equals(resultMap.get("err_code"))){
							JSONObject obj=new JSONObject();
							obj.put("result", false);
							obj.put("code", "0");
							obj.put("message", "订单已支付");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}
						if("ORDERCLOSED".equals(resultMap.get("err_code"))){
							JSONObject obj=new JSONObject();
							obj.put("result", false);
							obj.put("code", "0");
							obj.put("message", "订单已关闭");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}
						//系统错误
						if("SYSTEMERROR".equals(resultMap.get("err_code"))){
							for (int i = 0; i < 1; i++) {
								doPost(req,resp);
							}
							JSONObject obj=new JSONObject();
							obj.put("result", false);
							obj.put("code", "0");
							obj.put("message", "系统错误");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}
						if("XML_FORMAT_ERROR".equals(resultMap.get("err_code"))){
							JSONObject obj=new JSONObject();
							obj.put("result", false);
							obj.put("code", "0");
							obj.put("message", "XML格式错误");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}
						if("REQUIRE_POST_METHOD".equals(resultMap.get("err_code"))){
							JSONObject obj=new JSONObject();
							obj.put("result", false);
							obj.put("code", "0");
							obj.put("message", "请使用post方法");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
							/*log.info("return_code =Fail请求支付查询返回前端的数据："+"{\"msg\":\"请使用post方法\",\"result\":[{}],\"code\":\"\"}");
							resp.getWriter().write("{\"msg\":\"请使用post方法\",\"result\":[{}],\"code\":\"\"}");*/
						}
						//签名错误
						if("SIGNERROR".equals(resultMap.get("err_code"))){
							JSONObject obj=new JSONObject();
							obj.put("result", false);
							obj.put("code", "0");
							obj.put("message", "签名错误");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
							/*log.info("return_code =Fail请求支付查询返回前端的数据："+"{\"msg\":\"签名错误\",\"result\":[{}],\"code\":\"\"}");
							resp.getWriter().write("{\"msg\":\"签名错误\",\"result\":[{}],\"code\":\"\"}");*/
						}
					}else{
						//支付成功 
						if("SUCCESS".equals(resultMap.get("trade_state"))){
							//先从订单表中把该支付成功的订单查出来	2017-11-07
							Order order2=userService.getOrderSuccess(resultMap.get("out_trade_no"));
							//然后将短信通知所需的字段放入短信通知的方法中发送短信2017-11-07
							SMS.sendSms(order2.getUserName(), order2.getUseDate(), order2.getProductName(),
									order2.getOrderNumber()+"",resultMap.get("out_trade_no"), order2.getOrderCode(), 
									order2.getViewName(), order2.getUserPhone());
							//修改状态为0 字符成功
							userService.editState(out_trade_no);
							JSONObject obj=new JSONObject();
							obj.put("result", "success");
							obj.put("code", "1");
							obj.put("message", "订单已支付");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}else if("REFUND".equals(resultMap.get("trade_state"))){
							//转入退款
							JSONObject obj=new JSONObject();
							obj.put("result", "success");
							obj.put("code", "1");
							obj.put("message", "转入退款");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}else if("NOTPAY".equals(resultMap.get("trade_state"))){
							//未支付 
							JSONObject obj=new JSONObject();
							obj.put("result", "success");
							obj.put("code", "1");
							obj.put("message", "未支付 ");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}else if("CLOSED".equals(resultMap.get("trade_state"))){
							//已关闭 
							JSONObject obj=new JSONObject();
							obj.put("result", "success");
							obj.put("code", "1");
							obj.put("message", "已关闭 ");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}else if("USERPAYING".equals(resultMap.get("trade_state"))){
							//用户支付中
							try {
								Thread.sleep(10000);
								doPost(req,resp);
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}else if("PAYERROR".equals(resultMap.get("trade_state"))){
							//支付失败
							JSONObject obj=new JSONObject();
							obj.put("result", "success");
							obj.put("code", "1");
							obj.put("message", "支付失败");
							log.info("返回前端的数据："+obj.toString());
							resp.getOutputStream().print(obj.toString());
						}
					}
				}else{
					res = "操作失败!";
				}
			} catch (Exception e) {
				e.printStackTrace();
				res = "操作失败";
			} finally {
				if(response != null){
					response.close();
				}
				if(client != null){
					client.close();
				}
			}
		}else{
			//本地查询已支付
			JSONObject obj=new JSONObject();
			obj.put("result", "success");
			obj.put("code", "1");
			obj.put("message", "订单已支付");
			log.info("返回前端的数据："+obj.toString());
			resp.getOutputStream().print(obj.toString());
			/*log.info("{\"msg\":\"本地查询已支付:订单已支付\",\"result\":[{}],\"code\":\"\"}");
			resp.getWriter().write("{\"msg\":\"订单已支付\",\"result\":[{}],\"code\":\"\"}");*/
		}
		log.info("=====================================支付查询结束=====================================");
	}
}
